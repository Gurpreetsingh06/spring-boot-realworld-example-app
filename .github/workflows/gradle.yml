name: Java CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - '**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: '11'
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Test with Gradle
      run: ./gradlew clean test
    - name: Build with Gradle
      run: ./gradlew bootJar
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-realworld-example-app:latest
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  cd-pipeline:
    needs: build
    name: continuos deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Deploy to asg
        run: |
          for i in `aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name terraform-20221127145836504900000001 | grep -i instanceid  | awk '{ print $2}' | cut -d',' -f1| sed -e 's/"//g'`
          do	
            IP=$(aws ec2 describe-instances --instance-ids $i | grep -i PublicIpAddress | awk '{ print $2 }' | head -1 | cut -d"," -f1)
            echo $IP
            echo "key:"
            echo $PRIVATE_KEY
            echo $PRIVATE_KEY > key.pem
            cat key.pem
            chmod 400 key.pem
            ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i key.pem ubuntu@$IP "docker stop realworld-app && docker rm realworld-app && docker run --log-driver=awslogs --log-opt awslogs-region=us-east-1 --log-opt awslogs-group=/aws/app/loggroup --name realworld-app -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} -e MYSQL_PORT=3306 -e MYSQL_USER=admin -e MYSQL_PWD=${{ secrets.MYSQL_PWD }} -p 8080:8080 -d spring-boot-realworld-example-app:latest"
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      
