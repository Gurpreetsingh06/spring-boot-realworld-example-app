name: Java CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - '**'

jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up JDK 11
#       uses: actions/setup-java@v2
#       with:
#         distribution: zulu
#         java-version: '11'
#     - uses: actions/cache@v2
#       with:
#         path: |
#           ~/.gradle/caches
#           ~/.gradle/wrapper
#         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#         restore-keys: |
#           ${{ runner.os }}-gradle-
#     - name: Test with Gradle
#       run: ./gradlew clean test
#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v1
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1
#     - name: Login to DockerHub
#       uses: docker/login-action@v1
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
#     - name: Build and push
#       id: docker_build
#       uses: docker/build-push-action@v2
#       with:
#         push: true
#         tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring-boot-realworld-example-app:latest
#     - name: Image digest
#       run: echo ${{ steps.docker_build.outputs.digest }}
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          aws s3 ls
          IPS=$(aws --output text --query "Reservations[*].Instances[*].PublicIpAddress" ec2 describe-instances --instance-ids `aws --output text --query "AutoScalingGroups[0].Instances[*].InstanceId" autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20221127145836504900000001"`)
          echo $IPS
          read -a myarray <<< $IPS
          echo ${myarray[@]}
          echo ${myarray[0]}
          echo ${myarray[1]}
          echo '::set-output name=value::${myarray[@]}'
  build-cli:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      - run: |
          echo "${{ matrix.value }}"
#   cd-pipeline:
#     needs: build
#     name: continuos deploy
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - name: Upload to S3
#         run: |
#           IPS=$(aws --output text --query "Reservations[*].Instances[*].PublicIpAddress" ec2 describe-instances --instance-ids `aws --output text --query "AutoScalingGroups[0].Instances[*].InstanceId" autoscaling describe-auto-scaling-groups --auto-scaling-group-names "terraform-20221127145836504900000001"`)
          
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: 'us-east-1'
#       - name: executing remote ssh commands using password
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ubuntu
#           key: ${{ secrets.PRIVATE_KEY }}
#           port: 22
#           script: "docker-compose pull && docker-compose up -d"
